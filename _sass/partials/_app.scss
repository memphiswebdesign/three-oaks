// Main Styles

// See the other SASS partials for typography, variables etc.
// CSS Grid is used for the layout with fallbacks for less capable browsers
// declared beforehand, and a @supports feature query to reset fallbacks when
// necessary. https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks

// the body element is our primary layout grid
body {
  height: 100vh;
  display: grid;
  grid-template-rows: auto 1fr auto;
  grid-template-columns:
    [full-start] minmax(1rem, 1fr)
    [main-start] minmax(0, 52rem) [main-end]
    minmax(1rem, 1fr) [full-end];
}

// by default, make any new children of body to span the full track
body > * {
  grid-column: full;
}

// header, the first grid row
// it is also a grid for the logo and nav
header {
  background-color: $white;
  padding: 0 30px;
  text-align: center;
  border-bottom: 1px solid #eee;

  @media screen and (max-width: $screen-sm) {padding: 0 20px;}
}

header .init {
  padding: 30px 40px;
  max-width: 1110px;
  margin: 0 auto;

  @media screen and (max-width: $screen-sm) {padding: 20px 0;}

  .flex-apart {
    display: flex;
    justify-content: space-between;
  }
  .social,
  .contact-links {
    display: inline-flex;
    a {
      margin: 0 10px 0 0;
      font-size: 13px;
      color: #484A45;
      letter-spacing: 0.02em;

      &:last-of-type {margin: 0;}
    }

    i {
      color: #91938B;
      margin: 0 4px 0 0;
      font-size: 15px;
      @media screen and (max-width: $screen-xs) {font-size: 17px;}
    }
    span {
      @media screen and (max-width: $screen-xs) {display: none;}
    }
  }
  .social {}
  .contact-links {
    a {margin: 0 15px 0 0;}
    @media screen and (min-width: $screen-sm) {
      a {margin: 0 30px 0 0;}
    }
    
  }
}

#logo {
  a {
    display: inline-block;
    &:hover {opacity: 0.85;}
  }
  svg {
    display: inline-block;
    height: auto;
    max-width: 228px;

    @media screen and (max-width: $screen-sm) {max-width: 180px;}
  }
}

// main menu, is a grid item
header > nav {
  @media screen and (min-width: $screen-sm) {
    float: right;
  }
  ul {
    // flexbox is better than grid for distributing an unknown qty of children
    display: flex;
    li {
      margin-right: 2rem;
      display: inline-block;
      @media screen and (min-width: $screen-sm) {
        margin-right: 0;
      }
      a,
      a:visited {
        color: white;
        text-decoration: none;
        border: 0;
        @media screen and (min-width: $screen-sm) {
          padding: 1rem;
        }
        &[data-current="current page"] {
          // you can add an active nav item style here
        }
      }
      a:hover {
        color: white;
      }
    }
  }
}

// our main content wrapper, the width scales with font size
main {
  width: 100%;
  max-width: 780px;
  margin-right: auto;
  margin-left: auto;
  padding: 8rem 15px;
}

// blog posts list
html[data-current="blog"] main > section {
  ul li {
    padding: 2rem 0;
    border-bottom: 0.05em solid $hairline-color;
    p {
      padding-bottom: 0;
    }
  }
}

// adjacent blog posts links
nav[aria-label="Adjacent Posts"] {
  padding: 4rem 0;
  ul {
    display: flex;
    li {
      flex: 0 0 50%;
      width: auto;
      &:nth-child(2) {
        text-align: right;
      }
    }
  }
}

// contact form
html[data-current="contact"] main > form {
  display: grid;
  label {
    display: none;
  } 
  input,
  textarea {
    width: 100%;
    padding: 1rem;
    margin-bottom: 2rem;
  }
  button {
    width: 100%;
  }
}

// reset CSS Grid fallbacks when they aren't required
@supports (display: grid) {
  html[data-current="contact"] main > form {
    input,
    textarea,
    button {
      width: auto;
      max-width: none;
    }
  }
}

footer {
  grid-column: full;
  display: grid;
  grid-template-columns:
    [full-start] minmax(1rem, 1fr)
    [main-start] minmax(0, 50rem) [main-end]
    minmax(1rem, 1fr) [full-end];
  background-color: $grey;
  > small {
    grid-column: main;
  }
}


// Contact Forms
.hb-p-603aa0be26b77d23ce347082-1 {
  margin-left: -10px;
  margin-right: -10px;
}
form.contact-form {
  .block-component {
    padding-left: 0!important;
    padding-right: 0!important;
  }
}


